# BASE UI
#fun! s:X(group, fg, bg, attr, lcfg, lcbg)
# guifg guibg text_styles
ColorColumn: '. black .'
Conceal: ''
Cursor: 'cobalt yellow .'
CursorIM: ''
CursorColumn: 'darkest_grey yellow .'
CursorLine: 'darkest_grey yellow .'
CursorLineNr: 'dark_grey cobalt .'
Directory: 'yellow . .'
DiffAdd: 'green . .' # Constant
DiffAdded: 'green . .' # Constant
DiffChange: '. darkest_green .'
DiffDelete: 'black darker_red .'
DiffText: 'greyish_blue black r'
DiffRemoved: 'dark_pink . .'
ErrorMsg: '. dark_red .'
VertSplit: 'yellow . .'
Folded: 'light_grey darker_grey i'
FoldColumn: 'dark_grey black .'
SignColumn: 'dark_grey darkest_grey .'
IncSearch: ''
LineNr: 'dark_grey cobalt .'
MatchParen: 'white dark_purple .'
ModeMsg: ''
MoreMsg: 'light_green . .'
NonText: 'dark_grey cobalt .'
Normal: 'white cobalt .'
PMenu: 'lightest_grey darkest_grey .'
PMenuSel: 'darkest_grey yellow .'
PmenuSbar: 'dark_grey . .'
PmenuThumb: 'lightest_grey . .'
Question: 'green . .'
Search: 'black light_yellow u'
SpecialKey: 'darker_grey black .'
SpellBad: 'dark_red . u'
SpellLocal: '. darkest_green u'
SpellCap: '. darkest_blue u'
SpellRare: '. aubergine u'
StatusLine: 'black lightest_grey i'
StatusLineNC: 'white darker_grey i'
TabLine: 'black lighter_grey i'
TabLineFill: 'light_grey . .'
TabLineSel: 'black yellow bi'
Title: 'dirty_green . b'
Visual: 'darker_blue . .'
VisualNOS: ''
WarningMsg: ''
WildMenu: 'pale_pink darkest_grey .'
# BASE SYNTAX
Comment: 'dark_blue . i'
Constant: 'dark_pink . .'
String: 'green . .' # Constant
Character: '' # Constant
Boolean: '' # Constant
Number: '' # Constant
Float: '' # Constant
Identifier: 'dark_orange . .'
Function: 'yellow . .' # Identifier
Statement: 'dark_orange . .'
Conditional: '' # Statement
Repeat: '' # Statement
Label: '' # Statement
Operator: 'dark_blue . i' # Statement
Keyword: '' # Statement
Exception: '' # Statement
PreProc: 'dark_orange'
Include: '' # PreProc
Define: '' # PreProc
Macro: '' # PreProc
PreCondit: '' # PreProc
Type: 'yellow . .'
StorageClass: 'light_orange . .' # Type
Structure: 'dark_blue . i' # Type
Typedef: '' # Type
Special: 'light_green . .'
SpecialChar: '' # Special
Tag: '' # Special
Delimiter: 'dirty_blue . .' # Special
StringDelimiter: 'dirty_blue . .' # Special
SpecialComment: '' # Special
Debug: '' # Special
Underlined: ''
Ignore: ''
Error: '. dark_red .'
Todo: 'dark_blue . i'
